{
  "language": "Solidity",
  "sources": {
    "contracts/BuyMeCoffee.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract BuyMeCoffee {\r\n    // Event to emit when a Memo is created.\r\n    event NewMemo(\r\n        address indexed from,\r\n        uint256 timestamp,\r\n        string name,\r\n        string message\r\n    );\r\n\r\n    // Memo struct.\r\n    struct Memo {\r\n        address from;\r\n        uint256 timestamp;\r\n        string name;\r\n        string message;\r\n    }\r\n\r\n    // Address of contract deployer. Marked payable so that\r\n    // we can withdraw to this address later.\r\n    address payable owner;\r\n\r\n    // List of all memos received from coffee purchases.\r\n    Memo[] memos;\r\n\r\n    constructor() {\r\n        // Store the address of the deployer as a payable address.\r\n        // When we withdraw funds, we'll withdraw here.\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev fetches all stored memos\r\n     */\r\n    function getMemos() public view returns (Memo[] memory) {\r\n        return memos;\r\n    }\r\n\r\n    /**\r\n     * @dev buy a coffee for owner (sends an ETH tip and leaves a memo)\r\n     * @param _name name of the coffee purchaser\r\n     * @param _message a nice message from the purchaser\r\n     */\r\n    function buyCoffee(string memory _name, string memory _message)\r\n        public\r\n        payable\r\n    {\r\n        // Must accept more than 0 ETH for a coffee.\r\n        require(msg.value > 0, \"can't buy coffee for free!\");\r\n\r\n        // Add the memo to storage!\r\n        memos.push(Memo(msg.sender, block.timestamp, _name, _message));\r\n\r\n        // Emit a NewMemo event with details about the memo.\r\n        emit NewMemo(msg.sender, block.timestamp, _name, _message);\r\n    }\r\n\r\n    /**\r\n     * @dev send the entire balance stored in this contract to the owner\r\n     */\r\n    function withdrawTips() public {\r\n        require(owner.send(address(this).balance));\r\n    }\r\n\r\n    /**\r\n     * @dev check the balance of the owner\r\n     */\r\n    function checkBalance() public view returns (uint256 balance) {\r\n        return address(this).balance;\r\n        // require(owner.send(address(this).balance));\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}