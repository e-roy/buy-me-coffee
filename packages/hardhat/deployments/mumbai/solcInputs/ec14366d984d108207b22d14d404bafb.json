{
  "language": "Solidity",
  "sources": {
    "contracts/CoffeeFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./BuyMeCoffee.sol\";\r\n// import \"./modified/Ownable.sol\";\r\n\r\nerror NoPayable();\r\n\r\ncontract CoffeeFactory {\r\n    // BuyMeCoffee[] public coffees;\r\n    // address testAddress = 0x0000000000000000000000000000000000000001;\r\n\r\n    struct CoffeeFactoryStruct {\r\n        uint256 _coffeeIndex;\r\n        address _contract;\r\n        address _owner;\r\n        string _handle;\r\n    }\r\n\r\n    mapping(uint256 => CoffeeFactoryStruct) public allCoffeeContracts;\r\n\r\n    mapping(string => address) public searchHandles;\r\n\r\n    uint256 public numCoffeeContracts;\r\n\r\n    function createCoffeeContract(string calldata _handle) public {\r\n        // Create a new coffee contract\r\n        BuyMeCoffee newCoffeeContract = new BuyMeCoffee(_handle, msg.sender);\r\n        // BuyMeCoffee newCoffeeContract = new BuyMeCoffee(_handle, testAddress);\r\n\r\n        // Add the new coffee contract to the mapping\r\n        allCoffeeContracts[numCoffeeContracts] = (\r\n            CoffeeFactoryStruct(\r\n                numCoffeeContracts,\r\n                address(newCoffeeContract),\r\n                msg.sender,\r\n                _handle\r\n            )\r\n        );\r\n\r\n        searchHandles[_handle] = address(newCoffeeContract);\r\n\r\n        // Increment the number of coffee contracts\r\n        numCoffeeContracts++;\r\n\r\n        // Emit the event\r\n        // emit NewCoffeeContract(msg.sender, newCoffeeContract._coffeeIndex, newCoffeeContract._contract, newCoffeeContract._owner);\r\n\r\n        // Return the new coffee contract\r\n        // return newCoffeeContract;\r\n    }\r\n\r\n    /**\r\n     * @dev check the balance of the owner\r\n     */\r\n    function checkMsgSender() public view returns (address) {\r\n        // if (msg.sender != owner()) {\r\n        //     revert Unauthorized();\r\n        // }\r\n        // return _msgSender();\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev set receive function\r\n     */\r\n    receive() external payable {\r\n        revert NoPayable();\r\n    }\r\n\r\n    /**\r\n     * @dev set fallback function\r\n     */\r\n    fallback() external {\r\n        revert InvaildCall();\r\n    }\r\n}\r\n"
    },
    "contracts/BuyMeCoffee.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// import \"./modified/Ownable.sol\";\r\nimport \"./utils/Context.sol\";\r\n\r\nerror Unauthorized();\r\nerror InvalidAmount();\r\nerror InvaildCall();\r\n\r\ncontract BuyMeCoffee is Context {\r\n    // Event to emit when a Memo is created.\r\n    event NewMemo(\r\n        address indexed from,\r\n        uint256 timestamp,\r\n        string name,\r\n        string message\r\n    );\r\n\r\n    // Memo struct.\r\n    struct Memo {\r\n        address from;\r\n        uint256 timestamp;\r\n        string name;\r\n        string message;\r\n    }\r\n\r\n    // Address of contract deployer. Marked payable so that\r\n    // we can withdraw to this address later.\r\n    address payable _owner;\r\n\r\n    string public _handle;\r\n\r\n    // List of all memos received from coffee purchases.\r\n    Memo[] memos;\r\n\r\n    constructor(string memory __handle, address __owner) {\r\n        // Store the address of the deployer as a payable address.\r\n        // When we withdraw funds, we'll withdraw here.\r\n        _owner = payable(__owner);\r\n        _handle = __handle;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev fetches all stored memos\r\n     */\r\n    function getMemos() public view returns (Memo[] memory) {\r\n        return memos;\r\n    }\r\n\r\n    /**\r\n     * @dev buy a coffee for owner (sends an ETH tip and leaves a memo)\r\n     * @param _name name of the coffee purchaser\r\n     * @param _message a nice message from the purchaser\r\n     */\r\n    function buyCoffee(string memory _name, string memory _message)\r\n        public\r\n        payable\r\n    {\r\n        // Must accept more than 0 ETH for a coffee.\r\n        if (msg.value <= 0) revert InvalidAmount();\r\n\r\n        // Add the memo to storage!\r\n        memos.push(Memo(msg.sender, block.timestamp, _name, _message));\r\n\r\n        // Emit a NewMemo event with details about the memo.\r\n        emit NewMemo(msg.sender, block.timestamp, _name, _message);\r\n    }\r\n\r\n    /**\r\n     * @dev send the entire balance stored in this contract to the owner\r\n     */\r\n    function withdrawTips() public {\r\n        // if (msg.sender != owner()) {\r\n        //     revert Unauthorized();\r\n        // }\r\n        // require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        require(_owner.send(address(this).balance));\r\n    }\r\n\r\n    /**\r\n     * @dev check the balance of the owner\r\n     */\r\n    function checkBalance() public view returns (uint256 balance) {\r\n        // if (msg.sender != owner()) {\r\n        //     revert Unauthorized();\r\n        // }\r\n        // require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev check the balance of the owner\r\n     */\r\n    function checkMsgSender() public view returns (address) {\r\n        // if (msg.sender != owner()) {\r\n        //     revert Unauthorized();\r\n        // }\r\n        // return _msgSender();\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev set receive function\r\n     */\r\n    receive() external payable {\r\n        buyCoffee(\"default anon\", \"here's a coffee\");\r\n    }\r\n\r\n    /**\r\n     * @dev set fallback function\r\n     */\r\n    fallback() external {\r\n        revert InvaildCall();\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}